(function() {
  "use strict";
  module.exports = function(grunt) {
    var config;
    require("load-grunt-tasks")(grunt);
    grunt.loadNpmTasks('grunt-coffeelint');
    require("time-grunt")(grunt);
    config = {
      app: "app",
      dist: "dist"
    };
    grunt.initConfig({
      config: config,
      watch: {
        bower: {
          files: ["bower.json"],
          tasks: ["bowerInstall"]
        },
        jstest: {
          files: ["test/spec/{,*/}*.js"],
          tasks: ["test:watch"]
        },
        coffeescript: {
          files: ['<%= config.app %>/scripts/**/*.coffee'],
          tasks: ['coffeelint', 'coffee:server'],
          options: {
            spawn: false
          }
        },
        gruntfile: {
          files: ["Gruntfile.js"]
        },
        styles: {
          files: ["<%= config.app %>/styles/{,*/}*.css"],
          tasks: ["newer:copy:styles", "autoprefixer"]
        },
        livereload: {
          options: {
            livereload: "<%= connect.options.livereload %>"
          },
          files: ["<%= config.app %>/{,*/}*.html", ".tmp/styles/{,*/}*.css", "<%= config.app %>/images/{,*/}*"]
        }
      },
      connect: {
        options: {
          port: 9000,
          open: true,
          livereload: 35729,
          hostname: "localhost"
        },
        livereload: {
          options: {
            middleware: function(connect) {
              return [connect["static"](".tmp"), connect().use("/bower_components", connect["static"]("./bower_components")), connect["static"](config.app)];
            }
          }
        },
        test: {
          options: {
            open: false,
            port: 9001,
            middleware: function(connect) {
              return [connect["static"](".tmp"), connect["static"]("test"), connect().use("/bower_components", connect["static"]("./bower_components")), connect["static"](config.app)];
            }
          }
        },
        dist: {
          options: {
            base: "<%= config.dist %>",
            livereload: false
          }
        }
      },
      clean: {
        dist: {
          files: [
            {
              dot: true,
              src: [".tmp", "<%= config.dist %>/*", "!<%= config.dist %>/.git*"]
            }
          ]
        },
        server: ".tmp"
      },
      mocha: {
        all: {
          options: {
            run: true,
            urls: ["http://<%= connect.test.options.hostname %>:<%= connect.test.options.port %>/index.html"]
          }
        }
      },
      autoprefixer: {
        options: {
          browsers: ["last 1 version"]
        },
        dist: {
          files: [
            {
              expand: true,
              cwd: ".tmp/styles/",
              src: "{,*/}*.css",
              dest: ".tmp/styles/"
            }
          ]
        }
      },
      bowerInstall: {
        app: {
          src: ["<%= config.app %>/index.html"],
          exclude: ["bower_components/bootstrap/dist/js/bootstrap.js"]
        }
      },
      rev: {
        dist: {
          files: {
            src: ["<%= config.dist %>/scripts/{,*/}*.js", "<%= config.dist %>/styles/{,*/}*.css", "<%= config.dist %>/images/{,*/}*.*", "<%= config.dist %>/styles/fonts/{,*/}*.*", "<%= config.dist %>/*.{ico,png}"]
          }
        }
      },
      useminPrepare: {
        options: {
          dest: "<%= config.dist %>"
        },
        html: "<%= config.app %>/index.html"
      },
      usemin: {
        options: {
          assetsDirs: ["<%= config.dist %>", "<%= config.dist %>/images"]
        },
        html: ["<%= config.dist %>/{,*/}*.html"],
        css: ["<%= config.dist %>/styles/{,*/}*.css"]
      },
      imagemin: {
        dist: {
          files: [
            {
              expand: true,
              cwd: "<%= config.app %>/images",
              src: "{,*/}*.{gif,jpeg,jpg,png}",
              dest: "<%= config.dist %>/images"
            }
          ]
        }
      },
      svgmin: {
        dist: {
          files: [
            {
              expand: true,
              cwd: "<%= config.app %>/images",
              src: "{,*/}*.svg",
              dest: "<%= config.dist %>/images"
            }
          ]
        }
      },
      htmlmin: {
        dist: {
          options: {
            collapseBooleanAttributes: true,
            collapseWhitespace: true,
            removeAttributeQuotes: true,
            removeCommentsFromCDATA: true,
            removeEmptyAttributes: true,
            removeOptionalTags: true,
            removeRedundantAttributes: true,
            useShortDoctype: true
          },
          files: [
            {
              expand: true,
              cwd: "<%= config.dist %>",
              src: "{,*/}*.html",
              dest: "<%= config.dist %>"
            }
          ]
        }
      },
      copy: {
        dist: {
          files: [
            {
              expand: true,
              dot: true,
              cwd: "<%= config.app %>",
              dest: "<%= config.dist %>",
              src: ["*.{ico,png,txt}", ".htaccess", "images/{,*/}*.webp", "{,*/}*.html", "styles/fonts/{,*/}*.*"]
            }
          ]
        },
        styles: {
          expand: true,
          dot: true,
          cwd: "<%= config.app %>/styles",
          dest: ".tmp/styles/",
          src: "{,*/}*.css"
        }
      },
      concurrent: {
        server: ["copy:styles"],
        test: ["copy:styles"],
        dist: ["copy:styles", "imagemin", "svgmin"]
      },
      coffee: {
        server: {
          files: {
            '.tmp/scripts/main.js': '<%= config.app %>/scripts/**/*.coffee',
            '.tmp/workers/': '<%= config.app %>/workers/**/*.coffee'
          }
        },
        build: {
          files: {
            '<%= config.app %>/scripts/main.js': '<%= config.app %>/scripts/**/*.coffee'
          }
        },
        worker: {
          files: {
            src: '{,*/}*.coffee',
            dest: '<%= config.dist %>/'
          }
        }
      },
      coffeelint: {
        all: ['<%= config.app %>/scripts/**/*.coffee']
      }
    });
    grunt.registerTask("serve", function(target) {
      if (target === "dist") {
        return grunt.task.run(["build", "connect:dist:keepalive"]);
      }
      return grunt.task.run(["clean:server", "coffeelint", "coffee:server", "concurrent:server", "autoprefixer", "connect:livereload", "watch"]);
    });
    grunt.registerTask("server", function(target) {
      grunt.log.warn("The `server` task has been deprecated. Use `grunt serve` to start a server.");
      return grunt.task.run([(target ? "serve:" + target : "serve")]);
    });
    grunt.registerTask("test", function(target) {
      if (target !== "watch") {
        grunt.task.run(["clean:server", "concurrent:test", "autoprefixer"]);
      }
      return grunt.task.run(["connect:test", "mocha"]);
    });
    grunt.registerTask("build", ["clean:dist", "coffee:build", "useminPrepare", "concurrent:dist", "autoprefixer", "concat", "cssmin", "uglify", "copy:dist", "rev", "usemin", "htmlmin"]);
    return grunt.registerTask("default", ["newer:coffeelint", "test", "build"]);
  };

}).call(this);
