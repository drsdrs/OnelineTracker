{
  "name": "audiolib",
  "author": {
    "name": "Jussi Kalliokoski"
  },
  "version": "0.6.6",
  "description": "audiolib.js is a powerful audio tools library for javascript.",
  "repository": {
    "type": "git",
    "url": "http://github.com/jussi-kalliokoski/audiolib.js.git"
  },
  "engines": {
    "node": ">=0.10.0-0"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "bugs": {
    "url": "http://github.com/jussi-kalliokoski/audiolib.js/issues"
  },
  "directories": {
    "lib": "./lib"
  },
  "dependencies": {
    "cubeb": "0.2.x"
  },
  "scripts": {
    "prepublish": "./node_modules/.bin/grunt concat"
  },
  "main": "./lib/audiolib",
  "devDependencies": {
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-cli": "~0.1.9",
    "grunt-contrib-compress": "~0.5.2",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt": "~0.4.1",
    "paramon": "~0.1.1",
    "script-builder": "~0.3.3"
  },
  "readme": "# audiolib.js\n## Overview\n\naudiolib.js is a powerful toolkit for audio written in JS.\n\nIt ships with most of the common tools such as:\n\n* Reverbs\n* Comb/IIR/Biquad/All-Pass/Low-Pass/Band-Pass/High-Pass filters\n* Delays\n* Oscillators\n* FFT and other analyzing tools\n* Step sequencers\n* Envelope controls\n* Noise generators\n* Samplers\n\nIn addition, it hosts these tools in a comprehensive framework, that makes it simple to write a single effect and provides the higher level abstraction on top of that, making the whole system comfortable for both users and plugin authors.\n\nAs for the higher level abstraction, audiolib.js features a sophisticated automation API, alongside with pre-processing hooks, sample level access and buffer level management.\n\naudiolib.js is bundled with some tools to make an audio developer's life in a browser much easier, such as sink.js for a consistent API between the experimental browser audio APIs. To complement that, audiolib.js also bundles pcmdata.js that is a WAV encoder/decoder, so that you can turn the recordings you make using Sink.js into WAV files that the user can save. Other tools include the AudioWorker API that allows you to create web workers from strings or functions, bundling audiolib.js and its plugins, all ready to use from the worker.\n\n\n## How to get it\n\naudiolib.js is available both in browser and CLI environments.\n\n### Node\n\nTo install via npm:\n\n```\n$ npm install audiolib\n```\n\nPlease note that you'll need [grunt](http://gruntjs.com/) for this to work.\n\n### Browser\n\nFor browser environments, download the latest version [here](https://github.com/jussi-kalliokoski/audiolib.js/downloads), or get the [source code](https://github.com/jussi-kalliokoski/audiolib.js) from GitHub and build it yourself. Don't worry, instructions are included.\n\n## Documentation\n\nDocumentation is available at http://docs.audiolibjs.org/ . Tutorials can be found in the [wiki](https://github.com/jussi-kalliokoski/audiolib.js/wiki)\n\n## Demos\n\n(if you have your own, please fork & add | msg me)\n\n* [JSMad](http://audiocogs.org/codecs/mp3/)\n* [Orbisyn](http://niiden.com/orbisyn/)\n* [jams.no.de](http://jams.no.de)\n* [Audiocogs codecs](http://audiocogs.org/codecs/)\n\n## Libraries bundled with audiolib.js\n\n* [sink.js](https://github.com/jussi-kalliokoski/sink.js), for output and buffer handling.\n* [PCMData.js](https://github.com/jussi-kalliokoski/pcmdata.js), for WAV codecs. (project deprecated and adopted)\n* [binary.js](https://github.com/jussi-kalliokoski/binary.js), for PCMData.js and general binary data processing. (project deprecated and adopted)\n* [fft.js](https://github.com/jussi-kalliokoski/fft.js), for super fast FT. (project deprecated and adopted)\n\n## Related libraries\n\n* [XAudioJS](https://github.com/grantgalitz/XAudioJS) is an alternative audio sink with built-in resampling and a Flash fallback. More developer-controlled output environment, that might be more sane for example games.\n* [dynamicaudio.js](http://github.com/bfirsh/dynamicaudio.js) is a Flash fallback for Mozilla Audio Data API.\n* [Audiolet](https://github.com/oampo/Audiolet) is a graph-based audio routing framework with a lot of nice stuff.\n* [DSP.js](https://github.com/corbanbrook/dsp.js) is an extensive DSP toolkit originally designed for the Mozilla Audio Data API.\n\n## Plugins\n\nSpecifications for plugin developers can be found in https://github.com/jussi-kalliokoski/audiolib.js/tree/master/specs\n\n## Credits \n\nThis project is maintained by [Jussi Kalliokoski](https://github.com/jussi-kalliokoski), with significant contributions from [David Govea](https://github.com/davidgovea).\n\n## License\n\nLicensed under MIT license.\n\n## Example usage\n\n```javascript\n/* Create an output. */\n\nvar dev = audioLib.Sink(function(sampleBuffer){\n\t// Fill the buffer here.\n}, channelCount, preBufferSize, sampleRate);\n\n/*\n Note that all the arguments are optional,\n so if you want to create a write-only\n device, you can leave the arguments blank.\n Also, it is highly discouraged to set any\n of the arguments if you aren't sure that you\n need them. Use null if you need to skip\n arguments.\n*/\n\n/* Writing buffers: */\ndev.writeBuffer(buffer);\n\n/*\n You can also attach multiple listeners\n to the same Sink instance.\n*/\ndev.on('audioprocess', function(...){});\n\n\n/* Effects */\n\nvar del = audioLib.Delay(sampleRate, delay, feedback);\n\nvar flt = audioLib.IIRFilter(sampleRate, cutoffFreq, resonance);\n\nvar flt = audioLib.LP12Filter(sampleRate, cutoffFreq, resonance);\n\nvar flt = audioLib.Reverb(sampleRate, channelCount, wet, dry, roomSize, damping);\n\nvar dist = audioLib.BiquadFilter(sampleRate, b0, b1, b2, a1, a2);\n\n/* to feed a new input sample */\neffect.pushSample(sample);\n/* to get the output */\nsample = effect.getMix();\n\n/* Synthesis */\n\nvar osc = audioLib.Oscillator(sampleRate, frequency);\n\n/* to generate a new sample */\nosc.generate();\n/* to get the output */\nosc.getMix();\n\n/* Sampler */\n\nvar sampler = audioLib.Sampler(sampleRate, sampleBuffer, defaultPitch);\n\n/* Envelopes */\n\nvar adsr = audioLib.ADSREnvelope(sampleRate, attack, decay, sustain, release);\n\n/* to trigger the gate */\nadsr.triggerGate(isOpen);\n/* to update the value ** Do this on every sample fetch for this to work properly. */\nadsr.generate();\n/* Get the value */\nadsr.value; // 0.0 - 1.0, unless you put something more as sustain\n\nvar stepSeq = new audioLib.StepSequencer(sampleRate, stepLength, stepArray, attack);\n\n/* To start the sequence over */\nstepSeq.triggerGate();\n/* to update the value ** Do this on every sample fetch for this to work properly. */\nstepSeq.generate();\n/* Get the value */\nstepSeq.value; // 0.0 - 1.0\n\n/* Recording */\n\nvar rec = dev.record();\n\n/* To stop */\nrec.stop();\n// To export wav\nvar audioElement = new Audio(\n\t'data:audio/wav;base64,' +\n\tbtoa( rec.toWav() ) // presuming btoa is supported\n);\n\n/* Resampling buffers */\naudioLib.Sampler.resample(buffer, fromSampleRate,\n\tfromFrequency, toSampleRate, toFrequency);\n\n/*\n If you are used to buffer based approach (for example DSP.js)\n and don't need to do any raw manipulation, all the effects\n can be used as buffer based too.\n*/\n\nvar bufFx = audioLib.Delay/* or any effect */.createBufferBased(\n\tchannelCount, /* the parameters needed by the specific effect */);\n\nbufFx.append(buffer);\n\n```\n\n### Audio Workers\n\nYou can also use audiolib.js inside Audio Workers (Firefox 6.0+ only), but this is a whole another story. There are many approaches to that, you can include audiolib.js via an external javascript worker file, but audiolib.js offers an alternative approach to this: inline workers. Inline audio workers include the source code already downloaded, and thus creates a new worker that already contains audiolib.js. Inline Audio Workers also allow you to inject code into workers. Here is some code to get started, also see tests/audioworker.html.\n\n```javascript\n\nvar worker = audioLib.AudioWorker(function(){\n\tdevice = audioLib.Sink(function(buffer, channelCount){\n\t\t/* Do some audio processing, like you weren't in a worker. */\n\t});\n}, true /* enables injections */);\n\n/* Injection */\n\nworker.inject(function(){\n\t/* Execute some code inside the worker. */\n});\n\n/* Close the worker */\n\nworker.terminate();\n\n```\n\nIt's important to remember that even though that code looks like it's running in the same environment as the code it's written in, it's actually not and runs in the context of the worker, meaning you can't cross-reference variables. Also, the injections are sandboxed, so if you need to create a global variable, drop var.\n",
  "readmeFilename": "README.md",
  "_id": "audiolib@0.6.6",
  "_from": "audiolib@~0.6.6"
}
